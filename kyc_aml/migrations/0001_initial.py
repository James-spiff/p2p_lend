# Generated by Django 3.1.8 on 2021-08-31 09:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='KYCApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Timestamp when the record was created', verbose_name='Date created')),
                ('modified_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Timestamp when the record was modified', verbose_name='Date Modified')),
                ('legal_first_name', models.CharField(blank=True, help_text="User's first name as shown in documents", max_length=225, null=True, verbose_name='Legal first name')),
                ('legal_last_name', models.CharField(blank=True, help_text="User's last name as shown in documents", max_length=225, null=True, verbose_name='Legal last name')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth as shown in documents", null=True, verbose_name='Date of birth')),
                ('email', models.EmailField(blank=True, help_text="User's primary email address", max_length=150, verbose_name='Email Address')),
                ('address_line_1', models.CharField(help_text="User's address line 1. Must be located in the user's country of residence indicated at the time of registration", max_length=225, verbose_name='Address line 1')),
                ('address_line_2', models.CharField(blank=True, help_text="User's address line 2. Must be located in the user's country of residence indicated at the time of registration", max_length=225, null=True, verbose_name='Address line 2')),
                ('state', models.CharField(help_text="User's state of residence. Must be located in the user's country of residence indicated at the time of registration", max_length=225, verbose_name='State/Region')),
                ('city', models.CharField(help_text="User's city of residence. Must be located in the user's country of residence indicated at the time of registration", max_length=225, verbose_name='City')),
                ('zip_post_code', models.CharField(help_text='User zip code', max_length=20, verbose_name='Zip code')),
                ('identification_type', models.CharField(choices=[('national_id', 'National ID'), ('passport', 'International Passport'), ('drivers_license', 'Drivers License')], default='national_id', help_text="User's type of identification document to prove their identity", max_length=21, verbose_name='Indentification Type')),
                ('address_proof_type', models.CharField(choices=[('BANK_STATEMENT', 'Bank Statement'), ('CREDIT_CARD_STATEMENT', 'Credit Card Statement'), ('UTILITY_BILL', 'Utility Bill')], default='BANK_STATEMENT', help_text="User's type of document to prove his address", max_length=21, verbose_name='Address proof type')),
                ('proof_of_address_document', models.FileField(help_text="The user's document that shows his proof of address. It should not be older than 90 days, expired and must have the user's details written on it.", storage='uploads/kyc/', upload_to='', verbose_name='Proof of address document')),
                ('photo_id', models.FileField(help_text="The front part of the user's valid photo id", storage='uploads/kyc/', upload_to='', verbose_name='Photo ID(front)')),
                ('photo_id_back', models.FileField(help_text="The back part of the user's valid photo id", storage='uploads/kyc/', upload_to='', verbose_name='Photo ID(back)')),
                ('selfie_with_id', models.FileField(blank=True, help_text="User's photo of themself with their id. The face of the user and the document must be visible", null=True, storage='uploads/kyc/', upload_to='', verbose_name='Selfie with ID')),
                ('kyc_status', models.CharField(choices=[('unverified', 'Unverified'), ('pending', 'Pending'), ('verified', 'Verified'), ('action_required', 'Action Required'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected')], default='Unverified', help_text='KYC status of the client.', max_length=25, verbose_name='KYC Status')),
                ('kyc_status_note', models.TextField(blank=True, editable=False, help_text='Reason for current KYC status', null=True, verbose_name='KYC status note')),
                ('status_update_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Timestamp when status was updated', verbose_name='Status update time')),
                ('politically_exposed_person', models.CharField(choices=[('not_pep', 'No, I am not politically exposed'), ('pep', 'Yes, I am politically exposed')], default='not_pep', help_text="A politically exposed person(PEP) is one who has been entrusted with \n\t\t\ta prominent public function. A PEP generally present a higher risk for potential involvement in bribery\n\t\t\tand corruption by virtue of their position and the influence that they may hold. 'not_pep'\n\t\t\timplies the user is not politically exposed and 'pep' implies the user is. ", max_length=16, verbose_name='Politically Exposed Person(PEP)')),
                ('place_of_birth', models.CharField(blank=True, help_text="User's place of birth", max_length=225, null=True, verbose_name='Place of birth')),
                ('identification_number', models.CharField(blank=True, help_text="User's identification number", max_length=100, null=True, verbose_name='Identification number')),
                ('identification_issue_date', models.DateField(blank=True, help_text="The issue date of the user's identification document", null=True, verbose_name='Identification issue date')),
                ('identification_expiry_date', models.DateField(blank=True, help_text="The expiry date of the user's identification document", null=True, verbose_name='Identification expiry date')),
                ('kyc_submitted_ip_address', models.GenericIPAddressField(blank=True, editable=False, help_text="User's IP address recorded at the time of registration", null=True, verbose_name='KYC submitted IP address')),
                ('registered_ip_address', models.GenericIPAddressField(blank=True, editable=False, help_text="User's IP address recorded at the time of registration. This address is compared to the kyc_submitted_ip_address to make sure the user is still within the same region", null=True, verbose_name='Registered IP address')),
                ('us_citizen_tax_resident', models.BooleanField(default=False, help_text='Indicates whether the user is a citizen/tax resident of the US or not', verbose_name='US citizen tax resident')),
                ('accept_terms', models.BooleanField(default=False, help_text='Agreement collected from the user to accept the terms and conditions', verbose_name='Accept terms')),
                ('agreed_to_data_usage', models.BooleanField(default=False, help_text='Agreement collected from the user to gain consent to use their provided data', verbose_name='Agreed to data usage')),
                ('kyc_review_date', models.DateTimeField(blank=True, editable=False, help_text='The country of residence of the user as shown in documents', null=True, verbose_name='KYC review date')),
                ('reviewer_ip_address', models.GenericIPAddressField(blank=True, editable=False, help_text="Reviewer's IP address recorded at the time of registration. This address is compared to the kyc_submitted_ip_address to make sure the user is still within the same region", null=True, verbose_name='Reviewer IP address')),
                ('kyc_refused_code', models.CharField(blank=True, choices=[('EXPIRED_DOCUMENT', 'Document expired'), ('DOCUMENT_DOES_NOT_MATCH_USER_DATA', "Document doesn't match user data")], help_text='The reason for the refusal', max_length=35, null=True, verbose_name='KYC refused code')),
                ('citizenship', models.ForeignKey(help_text='The citizenship of the user as shown in documents', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='locations.country', verbose_name='Citizenship')),
                ('country_residence', models.ForeignKey(blank=True, help_text='The country of residence of the user as shown in documents', on_delete=django.db.models.deletion.CASCADE, to='locations.country', verbose_name='Country of residence')),
                ('kyc_country', models.ForeignKey(blank=True, help_text='The country which the KYC has been performed against the user. Each country has different KYC requirements', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='kyc_country', to='locations.country', verbose_name='KYC Country')),
                ('reviewer', models.ForeignKey(blank=True, help_text='The KYC staff or representative who checked and reviewed the KYC application', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kyc_reviewer', to=settings.AUTH_USER_MODEL, verbose_name='Reviewer')),
                ('second_citizenship', models.ForeignKey(blank=True, help_text='Second citizenship of the user as shown in documents', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='locations.country', verbose_name='Second citizenship')),
                ('user', models.ForeignKey(help_text='The unique identifier of the user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='KYC User')),
            ],
            options={
                'verbose_name': 'KYC Application',
                'verbose_name_plural': 'KYC Applications',
                'db_table': 'kyc_applications',
                'permissions': [('verify_kyc', 'Verify KYC Application'), ('reject_kyc', 'Reject KYC Application'), ('merge_kyc', 'Merge KYC Application with User Information')],
            },
        ),
    ]
